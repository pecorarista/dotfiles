---
# vim:ft=ansible:
- hosts: localhost
  connection: local
  vars:
    - ansible_python_interpreter: /usr/bin/python2
  tasks:
    - name: Install Neovim (Arch Linux)
      pacman:
        name: neovim
        state: latest
      sudo: yes
      when: ansible_os_family == "Archlinux"
    - name: Install requirements (Ubuntu)
      apt:
        name: "{{ item }}"
        state: latest
      sudo: yes
      with_items:
        - git
        - libtool
        - libtool-bin
        - autoconf
        - automake
        - cmake
        - libncurses5-dev
        - g++
        - pkg-config
        - python-dev
        - python-pip
        - python3-dev
        - python3-pip
      when: ansible_os_family == "Debian"
    - name: Install epel-release (RHEL)
      yum:
        name: "http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm"
        state: present
      sudo: yes
      when: ansible_os_family == "RedHat"
    - name: Install ius-release (RHEL)
      yum:
        name: https://rhel7.iuscommunity.org/ius-release.rpm
        state: present
      sudo: yes
      when: ansible_os_family == "RedHat"
    - name: Install requirements (RHEL)
      yum:
        name: "{{ item }}"
        state: latest
        enablerepo: epel,ius-release
      sudo: yes
      with_items:
        - git
        - libtool
        - autoconf
        - automake
        - cmake
        - gcc
        - gcc-c++
        - make
        - pkgconfig
        - python-devel
        - python-pip
        - python34u-devel
        - python34u-pip
        - unzip
      when: ansible_os_family == "RedHat"
    - name: Check if Neovim is installed
      shell: /usr/local/bin/nvim --version
      ignore_errors: True
      changed_when: False
      register: nvim
    - name: Create ~/Library
      file:
        path: ~/Library
        state: directory
      when: (ansible_os_family != "Archlinux") and (nvim|failed)
    - name: Compile Neovim
      git:
        repo: "https://github.com/neovim/neovim.git"
        dest: ~/Library/neovim
        version: ad34a376eb164852d2983341a9137a1e06a24bb9
      when: (ansible_os_family != "Archlinux") and (nvim|failed)
    - name: Install Neovim
      shell: |
        make cmake
        sudo make install
      args:
        chdir: ~/Library/neovim
      when: (ansible_os_family != "Archlinux") and (nvim|failed)
    - name: Create ~/.config/nvim
      file:
        path: ~/.config/nvim
        state: directory
    - name: Check if ~/.config/nvim/init.vim exists
      stat:
        path: ~/.config/nvim/init.vim
      register: config
    - name: Create ~/.config/nvim/init.vim
      command: ln -s ~/envs/.config/nvim/init.vim ~/.config/nvim/init.vim
      when: config.stat.exists == False
    - name: Create ~/.config/nvim/autoload
      file:
        path: ~/.config/nvim/autoload
        state: directory
    - name: Download vim-plug
      get_url:
        url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
        dest: ~/.config/nvim/autoload/plug.vim
    - name: Install xsel (Arch Linux)
      pacman:
        name: xsel
        state: latest
      sudo: yes
      when: ansible_os_family == "Archlinux"
    - name: Install xsel (Ubuntu)
      apt:
        name: xsel
        state: latest
      sudo: yes
      when: ansible_os_family == "Debian"
    - name: Install requirements (RHEL)
      yum:
        name: "{{ item }}"
        state: latest
        enablerepo: epel
      sudo: yes
      with_items:
        - bzip2
        - xsel
      when: ansible_os_family == "RedHat"
    - name: Check if ~/anaconda3/bin/python exists
      command: ~/anaconda3/bin/python --version
      register: python
      ignore_errors: True
      changed_when: False
    - name: Create ~/Downloads
      file:
        path: ~/Downloads
        state: directory
      when: python|failed
    - name: Download Anaconda
      get_url:
        url: "https://3230d63b5fc54e62148e-c95ac804525aac4b6dba79b00b39d1d3.ssl.cf1.rackcdn.com/Anaconda3-2.4.0-Linux-x86_64.sh"
        dest: ~/Downloads/Anaconda3-2.4.0-Linux-x86_64.sh
        sha256sum: fb4e480059e991f2fa632b5a9bcdd284c7f0677814cd719c11d524453f96a40d
        force: yes
      when: python|failed
    - name: Install Anaconda
      shell: bash ~/Downloads/Anaconda3-2.4.0-Linux-x86_64.sh -b
      when: python|failed
    - name: Check if a python package "neovim" is installed
      shell: ~/anaconda3/bin/pip freeze | grep neovim
      register: neovim
      ignore_errors: True
      changed_when: False
    - name: Install the neovim package
      shell: ~/anaconda3/bin/pip install neovim
      when: neovim|failed
    - name: Aliases for nvim
      lineinfile:
        dest: ~/.bashrc
        state: present
        line: "{{ item }}"
      with_items:
        - alias vi='nvim'
        - alias vim='nvim'
    - name: Check if .profile exists
      stat:
        path: ~/.profile
      register: profile
    - name: Set vim as the default editor
      lineinfile:
        dest: ~/.profile
        state: present
        line: export EDITOR=vim
      when: profile.stat.exists == True
    - name: Enable colors in vim
      lineinfile:
        dest: ~/.profile
        state: present
        line: export NVIM_TUI_ENABLE_TRUE_COLOR=1
      when: profile.stat.exists == True
    - name: Set vim as the default editor
      lineinfile:
        dest: ~/.bash_profile
        state: present
        line: export EDITOR=vim
      when: profile.stat.exists == False
    - name: Enable colors in vim
      lineinfile:
        dest: ~/.bash_profile
        state: present
        line: export NVIM_TUI_ENABLE_TRUE_COLOR=1
      when: profile.stat.exists == False
    # http://qiita.com/makisyu/items/d6b32d88cdd97b01a00f
    - name: Check if ~/bin/tmux exists
      stat:
        path: ~/bin/tmux
      register: tmux
      ignore_errors: True
      changed_when: False
      register: tmux
    - name: Download libevent
      get_url:
        url: "https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz"
        dest: ~/Downloads/libevent-2.0.21-stable.tar.gz
        sha256sum: 22a530a8a5ba1cb9c080cba033206b17dacd21437762155c6d30ee6469f574f5
        force: yes
      when: tmux.stat.exists == False
    - name: Extract libevent
      unarchive:
        src: ~/Downloads/libevent-2.0.21-stable.tar.gz
        dest: ~/Library/
        copy: no
      when: tmux.stat.exists == False
    - name: Create a directory "build"
      file:
        path: ~/Library/libevent-2.0.21-stable/build
        state: directory
      when: tmux.stat.exists == False
    - name: Compile libevent
      shell: |
        ./configure --prefix="{{ ansible_env.HOME }}/Library/libevent-2.0.21-stable/build"
        make
        make install
      args:
        chdir: ~/Library/libevent-2.0.21-stable
      when: tmux.stat.exists == False
    - name: Clone tmux
      git:
        repo: "https://github.com/tmux/tmux"
        dest: ~/Library/tmux
      when: tmux.stat.exists == False
    - name: Create a directory "build"
      file:
        path: ~/Library/tmux/build
        state: directory
      when: tmux.stat.exists == False
    - name: Configure tmux
      shell: |
        sh ~/Library/tmux/autogen.sh
        PKG_CONFIG_PATH="{{ ansible_env.HOME }}/Library/libevent-2.0.21-stable/build/lib/pkgconfig" \
        ./configure --enable-static --prefix="{{ ansible_env.HOME }}/Library/tmux/build"
      environment:
      args:
        chdir: ~/Library/tmux
      when: tmux.stat.exists == False
    - name: Compile tmux
      shell: |
        make
        make install
      args:
        chdir: ~/Library/tmux
      when: tmux.stat.exists == False
    - name: Create ~/bin
      file:
        path: ~/bin
        state: directory
      when: tmux.stat.exists == False
    - name: Create a link to tmux
      shell: ln -s ~/Library/tmux/build/bin/tmux ~/bin/tmux
      when: tmux.stat.exists == False
...
